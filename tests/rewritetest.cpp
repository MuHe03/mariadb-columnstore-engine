/* Copyright (C) 2022 MariaDB Corporation

   This program is free software; you can redistribute it and/or
   modify it under the terms of the GNU General Public License
   as published by the Free Software Foundation; version 2 of
   the License.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
   MA 02110-1301, USA. */

#include <gtest/gtest.h>


#include <algorithm>

#include "bytestream.h"
#include "objectreader.h"
#include <parsetree.h>

#include "query19_init.h"
#include "query19_fixed.h"

unsigned char __tree_hex_dump[] = {
    0x24, 0x01, 0x01, 0x1e, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x22, 0x20, 0x01, 0x00, 0x00, 0x00, 0x3e, 0x09, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00,
    0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x10, 0x0d, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x04, 0x00, 0x00, 0x00, 0x74, 0x70, 0x63, 0x68, 0x02,
    0x00, 0x00, 0x00, 0x74, 0x31, 0x02, 0x00, 0x00, 0x00, 0x63, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x20, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb9, 0x0b, 0x00, 0x00, 0x10, 0x00, 0x00,
    0x00, 0x60, 0x74, 0x70, 0x63, 0x68, 0x60, 0x2e, 0x60, 0x74, 0x31, 0x60, 0x2e, 0x60, 0x63, 0x31, 0x60,
    0x02, 0x00, 0x00, 0x00, 0x74, 0x31, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x08, 0x04, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x09, 0x00, 0x00, 0x00, 0x08, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
    0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
    0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x32,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x20, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
    0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x32, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x20, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};



auto nodeComparator= [](const execplan::TreeNode* left, const execplan::TreeNode*right) {
    return left->data() < right->data();
};
using Comparator = decltype(nodeComparator);
using CommonContainer = std::set<execplan::TreeNode*, Comparator>;


//Walk the tree and find out common conjuctions
void dummmyCommonConjunction(execplan::ParseTree* root, CommonContainer& accumulator, int level = 0) {
  if (root == nullptr) {
    accumulator.clear();
    return;
  }
  auto sep = std::string (level * 4, '-');
  std::cerr << sep << ": " <<  root->data()->data() << std::endl;

  if (root->left() == nullptr && root->left() == nullptr)
  {
    accumulator.insert(root->data());
    return;
  }

  if (root->data()->data() == "or") {
    CommonContainer leftAcc;
    CommonContainer rightAcc;
    dummmyCommonConjunction(root->left(), leftAcc, ++level);
    dummmyCommonConjunction(root->right(), rightAcc, ++level);
    CommonContainer intersection;
    std::set_intersection(leftAcc.begin(), leftAcc.end(),
                   rightAcc.begin(), rightAcc.end(),
                   std::inserter(intersection, intersection.begin()), nodeComparator);

    accumulator = intersection;
    return;
  }

  if (root->data()->data() == "and")
  {
    dummmyCommonConjunction(root->left(), accumulator, ++level);
    dummmyCommonConjunction(root->right(), accumulator, ++level);
    return;
  }

  if (root->left() == nullptr)
  {
    dummmyCommonConjunction(root->right(), accumulator, ++level);
    return;
  }

  dummmyCommonConjunction(root->left(), accumulator, ++level);
  return;
}

TEST(Stub, Check)
{
  messageqcpp::ByteStream b1;
  for (size_t i = 0; i < sizeof(__tree_hex_dump); i++)
  {
    b1 << __tree_hex_dump[i];
  }
  std::unique_ptr<execplan::ParseTree> tree1;
  tree1.reset(execplan::ObjectReader::createParseTree(b1));
  tree1->drawTree("/tmp/treetest.dot");
  //cout << tree1->toString();

  messageqcpp::ByteStream b2;
  for (size_t i = 0; i < sizeof(__query19_tree_init); i++)
  {
    b2 << __query19_tree_init[i];
  }
  std::unique_ptr<execplan::ParseTree> tree2;
  tree2.reset(execplan::ObjectReader::createParseTree(b2));
  tree2->drawTree("/tmp/treeq19-init.dot");
  CommonContainer common;
  dummmyCommonConjunction(tree2.get(), common);
  for (const auto & c: common)
  {
    std::cerr << "Common condition " << c->data() << std::endl;
  }

  messageqcpp::ByteStream b3;
  for (size_t i = 0; i < sizeof(__query19_tree_fixed); i++)
  {
    b3 << __query19_tree_fixed[i];
  }
  std::unique_ptr<execplan::ParseTree> tree3;
  tree3.reset(execplan::ObjectReader::createParseTree(b3));
  tree3->drawTree("/tmp/treeq19-fixed.dot");

  EXPECT_TRUE(1 == 1);
}
